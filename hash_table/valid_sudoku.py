"""
Проверка корректности судоку

сложно
решено

Дана доска 9×9, частично заполненная цифрами '1'–'9' и символами '.' (пустые клетки).
Нужно проверить, является ли доска корректной судоку по следующим правилам:

1. Каждая строка должна содержать уникальные цифры 1–9 (без повторений).
2. Каждый столбец должен содержать уникальные цифры 1–9.
3. Каждый из девяти блоков 3×3 должен содержать уникальные цифры 1–9.

Примечание: доска может быть частично заполненной, но проверяются только заполненные клетки.

Пример 1:

Ввод:
board = [
    ["5","3",".",".","7",".",".",".","."],
    ["6",".",".","1","9","5",".",".","."],
    [".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],
    ["4",".",".","8",".","3",".",".","1"],
    ["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],
    [".",".",".","4","1","9",".",".","5"],
    [".",".",".",".","8",".",".","7","9"]
]
Вывод: True

Пример 2:

Ввод:
board = [
    ["8","3",".",".","7",".",".",".","."],
    ["6",".",".","1","9","5",".",".","."],
    [".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],
    ["4",".",".","8",".","3",".",".","1"],
    ["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],
    [".",".",".","4","1","9",".",".","5"],
    [".",".",".",".","8",".",".","7","9"]
]
Вывод: False  # два '8' в верхнем левом блоке

Ограничения:
- len(board) == 9
- len(board[i]) == 9
- board[i][j] в {'1','2',...,'9','.'}
"""
from typing import List


def is_valid_sudoku(board: List[List[str]]) -> bool:
    rows = set()
    cols = set()
    blocks = set()

    for i in range(len(board)):
        for j in range(len(board[i])):
            val = board[i][j]
            if val == '.':
                continue
            block = i // 3 * 3 + j // 3
            if (val, i) in rows or (val, j) in cols or (val, block) in blocks:
                return False
            rows.add((val, i))
            cols.add((val, j))
            blocks.add((val, block))
    return True


if __name__ == "__main__":
    # Пример 1
    board1 = [
        ["5","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
    ]
    print(is_valid_sudoku(board1))  # True

    # Пример 2
    board2 = [
        ["8","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
    ]
    print(is_valid_sudoku(board2))  # False

# Оценка сложности:
# Время: O(1) — доска фиксированного размера 9×9 (или O(n^2) для размера n)
# Память: O(1) дополнительно (множества ограничены размером 9)
