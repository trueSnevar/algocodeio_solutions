"""
Лучшее место на парковке

средне
решено

Дан массив spots, представляющий парковку, где spots[i] = 1 уже занятое место, а spots[i] = 0 - свободное.

Дима не хочет рисковать, поэтому хочет припарковать машину так, чтобы она была как можно дальше от соседних.
Чтобы помочь Диме тебе нужно написать программу, которая выведет максимальное расстояние,

которое может быть между его машиной и соседними.

ВАЖНО: гарантированно есть хотя бы одно свободное место.

Пример 1:

Ввод: spots = [0,1,0,0,0,1,0,1,0]
Вывод: 2
Объяснение: места с индексами [0,2,3,4,6,8] свободны, а значит именно туда мы можем парковать машину.
Для каждого места найдем ответ: {0:1,2:1,3:2,4:1,6:1,8:1}.
Наибольший ответ будет когда мы паркуемся на 3 место, поэтому возвращаем 2 как ответ.

Пример 2:

Ввод: spots = [0,0,0,1,0,1]
Вывод: 3
Объяснение: если мы припаркуем машину на место с номером 0, то слева никаких машин не будет и получим ответ 3.

Пример 3:

Ввод: spots = [1,0,0,1]
Вывод: 1

Ограничения:

0 <= len(spots)
Значение массива spots: 0 или 1

"""

from typing import *


def best_parking_spot(spots: List[int]) -> int:
    l = 0
    r = 0
    result = 0
    while l < len(spots):
        while r + 1 < len(spots) and spots[r] == spots[r + 1]:
            r += 1

        # обновляем ответ только если в палавающем окне были 0-ли
        if spots[r] == 0:
            # если 0 прижат к стенке слева или справа, т. е.
            # то свободных мест будет r - l + 1 т к посадим в самый край
            if l == 0 or r == len(spots) - 1:
                result = max(result, r - l + 1)
            # окно распологается между 1-ами:
            # поэтому находим число мест по формуле (r - l + 2) // 2
            else:
                result = max(result, (r - l + 2) // 2)

        l = r + 1
        r = r + 1
    return result

if __name__ == "__main__":
    ex1 = [0,1,0,0,0,1,0,1,0]
    ex2 = [0,0,0,1,0,1]
    ex3 = [1,0,0,1]

    ans1 = best_parking_spot(ex1)
    ans2 = best_parking_spot(ex2)
    ans3 = best_parking_spot(ex3)
    print(ans1)
    print(ans2)
    print(ans3)

"""
Оценка сложности

Время: O(n), где n - длина массива spots
Память: O(1)
"""