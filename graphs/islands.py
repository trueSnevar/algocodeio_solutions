"""
Острова

Дана карта в виде двумерного массива grid, где 1 обозначает сушу,
а 0 обозначает воду. Нужно определить, сколько отдельных островов есть на карте.

Островом считается группа соединённых по вертикали или горизонтали клеток с сушей (1),
при этом ни одна из клеток острова не должна соприкасаться с краем карты —
то есть такие острова полностью окружены водой и не касаются границ массива.

Замечание: при необходимости, можно изменять исходный массив.

Пример 1:

Ввод: grid =
[[1,0,0]
,[1,1,0]
,[1,1,1]
,[1,0,0]]
Вывод: 0

Объяснение: на карте есть один участок суши, но мы не считаем его островом,
потому что он прилегает к краевым элементам карты.

Пример 2:

Ввод: grid =
[[0,0,0]
,[0,1,0]
,[0,1,0]
,[0,0,0]]
Вывод: 1

Пример 3:

Ввод: grid =
[[0,0,0,1]
,[0,1,0,0]
,[0,1,0,0]
,[0,0,1,0]
,[0,0,0,0]]
Вывод: 2

Пример 3:

ex1 = [
    [1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 1, 1, 0, 0, 1],
    [1, 0, 1, 0, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1]
]
Вывод: 2

Ограничения:

len(grid) >= 1
len(grid[i]) >= 1
"""

from typing import *


def num_islands(grid: List[List[int]]) -> int:
    ROWS = len(grid)
    COLS = len(grid[0])
    dirs = [(1, 0), (0, 1), (-1, 0), (0, -1)]
    ans = 0

    def dfs(r, c):
        grid[r][c] = 0
        for dr, dc in dirs:
            nr = dr + r
            nc = dc + c
            if (
                    nr in range(ROWS) and
                    nc in range(COLS) and
                    grid[nr][nc] == 1
            ):
                dfs(nr, nc)

        # Удаляем сушу, прилегающую к границам карты

    for i in range(len(grid)):
        for j in range(len(grid[0])):
            # Если клетка находится на границе и является сушей
            if (i == 0 or i == ROWS - 1 or j == 0 or j == COLS - 1) and grid[i][j] == 1:
                dfs(i, j)

    # Считаем количество оставшихся островов
    for i in range(ROWS):
        for j in range(COLS):
            if grid[i][j] == 1:
                dfs(i, j)
                ans += 1

    return ans

if __name__ == "__main__":
    ex1 = [
          [1, 0, 0]
        , [1, 1, 0]
        , [1, 1, 1]
        , [1, 0, 0]
    ]

    ex2 =[
          [0, 0, 0]
        , [0, 1, 0]
        , [0, 1, 0]
        , [0, 0, 0]
    ]

    ex3 =[
          [0, 0, 0, 1]
        , [0, 1, 0, 0]
        , [0, 1, 0, 0]
        , [0, 0, 1, 0]
        , [0, 0, 0, 0]
    ]

    ex4 = [
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 1, 1, 0, 0, 1],
        [1, 0, 1, 0, 0, 1, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]

    ans1 = num_islands(ex1)
    ans2 = num_islands(ex2)
    ans3 = num_islands(ex3)
    ans4 = num_islands(ex4)

    print(ans1)
    print(ans2)
    print(ans3)
    print(ans4)



"""
Оценка сложности

Время: O(n * m), где n кол-во строк и m кол-во столбцов входного массива
Память: O(n * m), где n кол-во строк и m кол-во столбцов входного массива
"""

