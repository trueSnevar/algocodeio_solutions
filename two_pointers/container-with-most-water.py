"""
Самый большой контейнер

средне
решено

Дан массив целых чисел nums, где nums[i] — высота вертикальной линии в позиции i.
Нужно найти максимальную площадь, которую может удержать вода между двумя такими линиями.

Площадь рассчитывается как:
    min(nums[i], nums[j]) * (j - i)
где i < j — индексы двух линий (0-based).

ВАЖНО: решить с использованием двух указателей за O(n) времени и O(1) памяти.

Пример 1:

Ввод: nums = [1,8,6,2,5,4,8,3,7]
Вывод: 49

Объяснение:
Выбираем линии на позициях 1 (высота 8) и 8 (высота 7):
    min(8, 7) * (8 - 1) = 7 * 7 = 49

Пример 2:

Ввод: nums = [2,3,4,5]
Вывод: 6

Объяснение:
Оптимальный выбор: позиции 1 и 4 (0-based 1 и 3):
    min(3, 5) * (3 - 1) = 3 * 2 = 6

Ограничения:
- len(nums) ≥ 2
"""
from typing import List


def max_area(nums: List[int]) -> int:
    """
    Возвращает максимальную площадь воды между двумя линиями в массиве nums.
    Используется метод двух указателей.
    """
    left, right = 0, len(nums) - 1
    best = 0
    while left < right:
        height = min(nums[left], nums[right])
        width = right - left
        area = height * width
        if area > best:
            best = area
        # сдвигаем указатель, стоящий у меньшей линии
        if nums[left] < nums[right]:
            left += 1
        else:
            right -= 1
    return best


if __name__ == "__main__":
    # Пример 1
    print(max_area([1,8,6,2,5,4,8,3,7]))  # 49
    # Пример 2
    print(max_area([2,3,4,5]))            # 6

# Оценка сложности:
# Время: O(n), где n = len(nums)
# Память: O(1) дополнительной памяти
